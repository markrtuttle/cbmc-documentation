digraph "java_string_library_preprocesst"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="java_string_library\l_preprocesst",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" string_types" ,fontname="Helvetica"];
  Node2 [label="std::unordered_set\l\< dstringt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node3 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node3 [label="dstringt",height=0.2,width=0.4,color="black",URL="$classdstringt.html",tooltip="dstringt has one field, an unsigned integer no which is an index into a static table of strings."];
  Node4 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt \>" ,fontname="Helvetica"];
  Node4 [label="std::unordered_set\< K \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node5 -> Node4 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node5 [label="K",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" cprover_equivalent\l_to_java_assign_function\ncprover_equivalent_to\l_java_constructor\ncprover_equivalent_to\l_java_string_returning\l_function\ncprover_equivalent_to\l_java_function\ncprover_equivalent_to\l_java_assign_and_return\l_function" ,fontname="Helvetica"];
  Node6 [label="std::unordered_map\l\< irep_idt, irep_idt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node3 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys\nelements" ,fontname="Helvetica"];
  Node7 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irep_idt, irep_idt \>" ,fontname="Helvetica"];
  Node7 [label="std::unordered_map\l\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node5 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node8 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node8 [label="T",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" refined_string_type" ,fontname="Helvetica"];
  Node9 [label="refined_string_typet",height=0.2,width=0.4,color="black",URL="$classrefined__string__typet.html",tooltip=" "];
  Node10 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="struct_typet",height=0.2,width=0.4,color="black",URL="$classstruct__typet.html",tooltip="Structure type, corresponds to C style structs."];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="struct_union_typet",height=0.2,width=0.4,color="black",URL="$classstruct__union__typet.html",tooltip="Base type for structs and unions."];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="typet",height=0.2,width=0.4,color="black",URL="$classtypet.html",tooltip="The type of an expression, extends irept."];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="red",URL="$classsharing__treet.html",tooltip=" "];
  Node12 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" index_type\nchar_type" ,fontname="Helvetica"];
  Node20 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" id_maps" ,fontname="Helvetica"];
  Node20 [label="std::array\< id_mapt\l *, 5 \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node20 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node21 -> Node20 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< id_mapt *, 5 \>" ,fontname="Helvetica"];
  Node21 [label="std::array\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node8 -> Node21 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node22 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" character_preprocess" ,fontname="Helvetica"];
  Node22 [label="character_refine_preprocesst",height=0.2,width=0.4,color="black",URL="$classcharacter__refine__preprocesst.html",tooltip=" "];
  Node23 -> Node22 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" conversion_inputt" ,fontname="Helvetica"];
  Node23 [label="code_function_callt",height=0.2,width=0.4,color="black",URL="$classcode__function__callt.html",tooltip="goto_instruction_codet representation of a function call statement."];
  Node24 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="goto_instruction_codet",height=0.2,width=0.4,color="black",URL="$classcodet.html",tooltip="Data structure for representing an arbitrary statement in a program."];
  Node25 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node13 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 -> Node22 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" conversion_table" ,fontname="Helvetica"];
  Node26 [label="std::unordered_map\l\< dstringt, conversion\l_functiont \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node3 -> Node26 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node7 -> Node26 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt, conversion\l_functiont \>" ,fontname="Helvetica"];
  Node26 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" conversion_table" ,fontname="Helvetica"];
}
