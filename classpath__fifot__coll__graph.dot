digraph "path_fifot"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="path_fifot",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="FIFO save queue: paths are resumed in the order that they were saved."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="path_storaget",height=0.2,width=0.4,color="black",URL="$classpath__storaget.html",tooltip="Storage for symbolic execution paths to be resumed later."];
  Node3 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" safe_pointers" ,fontname="Helvetica"];
  Node3 [label="std::unordered_map\l\< dstringt, local_safe\l_pointerst \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node4 [label="dstringt",height=0.2,width=0.4,color="black",URL="$classdstringt.html",tooltip="dstringt has one field, an unsigned integer no which is an index into a static table of strings."];
  Node5 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node5 [label="local_safe_pointerst",height=0.2,width=0.4,color="black",URL="$classlocal__safe__pointerst.html",tooltip="A very simple, cheap analysis to determine when dereference operations are trivially guarded by a che..."];
  Node6 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" non_null_expressions" ,fontname="Helvetica"];
  Node6 [label="std::map\< unsigned,\l std::set\< exprt, local\l_safe_pointerst::type_comparet \> \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node7 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node7 [label="std::set\< exprt, local\l_safe_pointerst::type\l_comparet \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node8 [label="exprt",height=0.2,width=0.4,color="red",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node17 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< exprt, local_safe\l_pointerst::type_comparet \>" ,fontname="Helvetica"];
  Node17 [label="std::set\< K \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node18 -> Node17 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node18 [label="K",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node19 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< unsigned, std::set\l\< exprt, local_safe_pointerst\l::type_comparet \> \>" ,fontname="Helvetica"];
  Node19 [label="std::map\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node18 -> Node19 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node15 -> Node19 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node15 [label="T",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node20 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt, local_safe\l_pointerst \>" ,fontname="Helvetica"];
  Node20 [label="std::unordered_map\l\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node18 -> Node20 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node15 -> Node20 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node21 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dirty" ,fontname="Helvetica"];
  Node21 [label="incremental_dirtyt",height=0.2,width=0.4,color="black",URL="$classincremental__dirtyt.html",tooltip="Wrapper for dirtyt that permits incremental population, ensuring each function is analysed exactly on..."];
  Node22 -> Node21 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dirty_processed_functions" ,fontname="Helvetica"];
  Node22 [label="std::unordered_set\l\< dstringt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node22 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node23 -> Node22 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt \>" ,fontname="Helvetica"];
  Node23 [label="std::unordered_set\< K \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node18 -> Node23 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node24 -> Node21 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dirty" ,fontname="Helvetica"];
  Node24 [label="dirtyt",height=0.2,width=0.4,color="black",URL="$classdirtyt.html",tooltip="Dirty variables are ones which have their address taken so we can't reliably work out where they may ..."];
  Node22 -> Node24 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dirty" ,fontname="Helvetica"];
  Node25 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" build_symex_nondet" ,fontname="Helvetica"];
  Node25 [label="symex_nondet_generatort",height=0.2,width=0.4,color="black",URL="$classsymex__nondet__generatort.html",tooltip="Functor generating fresh nondet symbols."];
  Node26 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" loop_analysis_map" ,fontname="Helvetica"];
  Node26 [label="std::unordered_map\l\< dstringt, std::shared\l_ptr\< lexical_loops_templatet \> \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node27 -> Node26 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node27 [label="std::shared_ptr\< lexical\l_loops_templatet \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node28 -> Node27 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node28 [label="lexical_loops_templatet\l\< P, T \>",height=0.2,width=0.4,color="black",URL="$classlexical__loops__templatet.html",tooltip="Main driver for working out if a class (normally goto_programt) has any lexical loops."];
  Node29 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="loop_analysist\< T \>",height=0.2,width=0.4,color="black",URL="$classloop__analysist.html",tooltip=" "];
  Node30 -> Node29 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" loop_map" ,fontname="Helvetica"];
  Node30 [label="std::map\< T, loopt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node15 -> Node30 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node19 -> Node30 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< T, loopt \>" ,fontname="Helvetica"];
  Node33 -> Node27 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< lexical_loops_templatet \>" ,fontname="Helvetica"];
  Node33 [label="std::shared_ptr\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node15 -> Node33 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node4 -> Node26 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node20 -> Node26 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt, std::shared\l_ptr\< lexical_loops_templatet \> \>" ,fontname="Helvetica"];
  Node34 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" l2_indices\nl1_indices" ,fontname="Helvetica"];
  Node34 [label="std::unordered_map\l\< irep_idt, std::size_t \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node34 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node20 -> Node34 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irep_idt, std::size_t \>" ,fontname="Helvetica"];
  Node35 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" paths" ,fontname="Helvetica"];
  Node35 [label="std::list\< patht \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node36 -> Node35 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node36 [label="std::list\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node15 -> Node36 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node36 -> Node35 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< patht \>" ,fontname="Helvetica"];
}
