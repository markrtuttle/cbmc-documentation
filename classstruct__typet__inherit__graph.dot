digraph "struct_typet"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="struct_typet",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Structure type, corresponds to C style structs."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="struct_union_typet",height=0.2,width=0.4,color="black",URL="$classstruct__union__typet.html",tooltip="Base type for structs and unions."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="typet",height=0.2,width=0.4,color="black",URL="$classtypet.html",tooltip="The type of an expression, extends irept."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, forward_list\l_as_mapt\< irep_idt, irept \> \>" ,fontname="Helvetica"];
  Node6 [label="sharing_treet\< derivedt,\l named_subtreest \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip="Base class for tree-like data structures with sharing."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="class_typet",height=0.2,width=0.4,color="black",URL="$classclass__typet.html",tooltip="Class type."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="java_class_typet",height=0.2,width=0.4,color="black",URL="$classjava__class__typet.html",tooltip=" "];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="java_generic_class\l_typet",height=0.2,width=0.4,color="black",URL="$classjava__generic__class__typet.html",tooltip="Class to hold a class with generics, extends the java class type with a vector of java generic type p..."];
  Node8 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="java_implicitly_generic\l_class_typet",height=0.2,width=0.4,color="black",URL="$classjava__implicitly__generic__class__typet.html",tooltip="Type to hold a Java class that is implicitly generic, e.g., an inner class of a generic outer class o..."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="refined_string_typet",height=0.2,width=0.4,color="black",URL="$classrefined__string__typet.html",tooltip=" "];
}
