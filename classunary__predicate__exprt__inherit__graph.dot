digraph "unary_predicate_exprt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="unary_predicate_exprt",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="A base class for expressions that are predicates, i.e., Boolean-typed, and that take exactly one argu..."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="unary_exprt",height=0.2,width=0.4,color="black",URL="$classunary__exprt.html",tooltip="Generic base class for unary expressions."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="expr_protectedt",height=0.2,width=0.4,color="black",URL="$classexpr__protectedt.html",tooltip="Base class for all expressions."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip=" "];
  Node7 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, forward_list\l_as_mapt\< irep_idt, irept \> \>" ,fontname="Helvetica"];
  Node7 [label="sharing_treet\< derivedt,\l named_subtreest \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip="Base class for tree-like data structures with sharing."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="is_dynamic_object_exprt",height=0.2,width=0.4,color="black",URL="$classis__dynamic__object__exprt.html",tooltip="Evaluates to true if the operand is a pointer to a dynamic object."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="is_invalid_pointer\l_exprt",height=0.2,width=0.4,color="black",URL="$classis__invalid__pointer__exprt.html",tooltip=" "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="isfinite_exprt",height=0.2,width=0.4,color="black",URL="$classisfinite__exprt.html",tooltip="Evaluates to true if the operand is finite."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="isinf_exprt",height=0.2,width=0.4,color="black",URL="$classisinf__exprt.html",tooltip="Evaluates to true if the operand is infinite."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="isnan_exprt",height=0.2,width=0.4,color="black",URL="$classisnan__exprt.html",tooltip="Evaluates to true if the operand is NaN."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="isnormal_exprt",height=0.2,width=0.4,color="black",URL="$classisnormal__exprt.html",tooltip="Evaluates to true if the operand is a normal number."];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="sign_exprt",height=0.2,width=0.4,color="black",URL="$classsign__exprt.html",tooltip="Sign of an expression Predicate is true if _op is negative, false otherwise."];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="unary_overflow_exprt",height=0.2,width=0.4,color="black",URL="$classunary__overflow__exprt.html",tooltip="A Boolean expression returning true, iff operation kind would result in an overflow when applied to t..."];
  Node15 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="unary_minus_overflow\l_exprt",height=0.2,width=0.4,color="black",URL="$classunary__minus__overflow__exprt.html",tooltip="A Boolean expression returning true, iff negation would result in an overflow when applied to the (si..."];
}
