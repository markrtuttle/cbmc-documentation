digraph "string_builtin_functiont"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="string_builtin_functiont",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Base class for string functions that are built in the solver."];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" array_pool" ,fontname="Helvetica"];
  Node2 [label="array_poolt",height=0.2,width=0.4,color="black",URL="$classarray__poolt.html",tooltip="Correspondance between arrays and pointers string representations."];
  Node3 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" arrays_of_pointers" ,fontname="Helvetica"];
  Node3 [label="std::unordered_map\l\< exprt, array_string\l_exprt, irep_hash \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node4 [label="array_string_exprt",height=0.2,width=0.4,color="black",URL="$classarray__string__exprt.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="red",URL="$classsharing__treet.html",tooltip=" "];
  Node5 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node15 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< exprt, array_string\l_exprt, irep_hash \>" ,fontname="Helvetica"];
  Node15 [label="std::unordered_map\l\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node16 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node16 [label="K",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node12 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node12 [label="T",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node17 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" fresh_symbol" ,fontname="Helvetica"];
  Node17 [label="symbol_generatort",height=0.2,width=0.4,color="black",URL="$classsymbol__generatort.html",tooltip="Generation of fresh symbols of a given type."];
  Node18 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" length_of_array" ,fontname="Helvetica"];
  Node18 [label="std::unordered_map\l\< array_string_exprt,\l exprt, irep_hash \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node18 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node5 -> Node18 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node15 -> Node18 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< array_string_exprt,\l exprt, irep_hash \>" ,fontname="Helvetica"];
  Node5 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" return_code" ,fontname="Helvetica"];
}
