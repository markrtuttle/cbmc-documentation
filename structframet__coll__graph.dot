digraph "framet"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="framet",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Stack frames â€“ these are used for function calls and for exceptions."];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" goto_state_map" ,fontname="Helvetica"];
  Node2 [label="std::map\< goto_programt\l::const_targett, goto\l_state_listt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node3 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node3 [label="std::list\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node4 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node4 [label="T",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node5 [label="std::list\< T \>::const\l_iterator",height=0.2,width=0.4,color="grey75",tooltip="STL iterator class."];
  Node6 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< goto_programt::const\l_targett, goto_state_listt \>" ,fontname="Helvetica"];
  Node6 [label="std::map\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node7 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node7 [label="K",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node8 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" loop_iterations" ,fontname="Helvetica"];
  Node8 [label="std::unordered_map\l\< dstringt, framet::\lloop_infot \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node8 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node9 [label="dstringt",height=0.2,width=0.4,color="black",URL="$classdstringt.html",tooltip="dstringt has one field, an unsigned integer no which is an index into a static table of strings."];
  Node10 -> Node8 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node10 [label="framet::loop_infot",height=0.2,width=0.4,color="black",URL="$structframet_1_1loop__infot.html",tooltip=" "];
  Node11 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt, framet\l::loop_infot \>" ,fontname="Helvetica"];
  Node11 [label="std::unordered_map\l\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node7 -> Node11 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node4 -> Node11 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node12 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" loops_info" ,fontname="Helvetica"];
  Node12 [label="std::shared_ptr\< lexical\l_loops_templatet \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node13 -> Node12 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node13 [label="lexical_loops_templatet\l\< P, T \>",height=0.2,width=0.4,color="black",URL="$classlexical__loops__templatet.html",tooltip="Main driver for working out if a class (normally goto_programt) has any lexical loops."];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="loop_analysist\< T \>",height=0.2,width=0.4,color="black",URL="$classloop__analysist.html",tooltip=" "];
  Node15 -> Node14 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" loop_map" ,fontname="Helvetica"];
  Node15 [label="std::map\< T, loopt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node16 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node16 [label="loop_templatet\< T \>",height=0.2,width=0.4,color="black",URL="$classloop__templatet.html",tooltip="A loop, specified as a set of instructions."];
  Node17 -> Node16 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" loop_instructions" ,fontname="Helvetica"];
  Node17 [label="std::set\< T \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node17 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node18 -> Node17 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< T \>" ,fontname="Helvetica"];
  Node18 [label="std::set\< K \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node7 -> Node18 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node4 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node6 -> Node15 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< T, loopt \>" ,fontname="Helvetica"];
  Node19 -> Node12 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< lexical_loops_templatet \>" ,fontname="Helvetica"];
  Node19 [label="std::shared_ptr\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node4 -> Node19 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node20 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" catch_map" ,fontname="Helvetica"];
  Node20 [label="std::map\< dstringt,\l goto_programt::targett \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node20 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node21 -> Node20 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node21 [label="std::list\< T \>::iterator",height=0.2,width=0.4,color="grey75",tooltip="STL iterator class."];
  Node6 -> Node20 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt, goto_programt\l::targett \>" ,fontname="Helvetica"];
  Node22 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" guard_at_function_start" ,fontname="Helvetica"];
  Node22 [label="guard_exprt",height=0.2,width=0.4,color="black",URL="$classguard__exprt.html",tooltip=" "];
  Node23 -> Node22 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" expr" ,fontname="Helvetica"];
  Node23 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node24 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node25 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip=" "];
  Node26 -> Node25 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" empty_d\ndata" ,fontname="Helvetica"];
  Node26 [label="tree_nodet\< treet,\l named_subtreest, sharing \>",height=0.2,width=0.4,color="black",URL="$classtree__nodet.html",tooltip="A node with data in a tree, it contains:"];
  Node27 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="ref_count_ift\< true \>",height=0.2,width=0.4,color="black",URL="$structref__count__ift_3_01true_01_4.html",tooltip=" "];
  Node28 -> Node26 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" sub" ,fontname="Helvetica"];
  Node28 [label="std::vector\< treet \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node29 -> Node28 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< treet \>" ,fontname="Helvetica"];
  Node29 [label="std::vector\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node4 -> Node29 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node9 -> Node26 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" data" ,fontname="Helvetica"];
  Node30 -> Node25 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, forward_list\l_as_mapt\< irep_idt, irept \> \>" ,fontname="Helvetica"];
  Node30 [label="sharing_treet\< derivedt,\l named_subtreest \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip="Base class for tree-like data structures with sharing."];
  Node26 -> Node30 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" empty_d\ndata" ,fontname="Helvetica"];
  Node9 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" function_identifier" ,fontname="Helvetica"];
  Node23 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" call_lhs" ,fontname="Helvetica"];
  Node31 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" calling_location" ,fontname="Helvetica"];
  Node31 [label="symex_targett::sourcet",height=0.2,width=0.4,color="black",URL="$structsymex__targett_1_1sourcet.html",tooltip="Identifies source in the context of symbolic execution."];
  Node9 -> Node31 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" function_id" ,fontname="Helvetica"];
  Node32 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" local_objects" ,fontname="Helvetica"];
  Node32 [label="std::set\< dstringt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node32 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node18 -> Node32 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt \>" ,fontname="Helvetica"];
  Node33 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" active_loops" ,fontname="Helvetica"];
  Node33 [label="std::vector\< framet\l::active_loop_infot \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node34 -> Node33 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node34 [label="framet::active_loop\l_infot",height=0.2,width=0.4,color="black",URL="$classframet_1_1active__loop__infot.html",tooltip=" "];
  Node35 -> Node34 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" blacklisted_loops" ,fontname="Helvetica"];
  Node35 [label="std::vector\< std::reference\l_wrapper\< lexical_loopst\l::loopt \> \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node29 -> Node35 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< std::reference_wrapper\l\< lexical_loopst::loopt \> \>" ,fontname="Helvetica"];
  Node29 -> Node33 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< framet::active_loop\l_infot \>" ,fontname="Helvetica"];
  Node36 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" parameter_names" ,fontname="Helvetica"];
  Node36 [label="std::vector\< dstringt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node36 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node29 -> Node36 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt \>" ,fontname="Helvetica"];
  Node37 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" old_level1" ,fontname="Helvetica"];
  Node37 [label="symex_level1t",height=0.2,width=0.4,color="black",URL="$structsymex__level1t.html",tooltip="Functor to set the level 1 renaming of SSA expressions."];
  Node38 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" current_names" ,fontname="Helvetica"];
  Node38 [label="sharing_mapt\< irep\l_idt, std::pair\< ssa\l_exprt, std::size_t \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__mapt.html",tooltip=" "];
  Node39 -> Node38 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" map" ,fontname="Helvetica"];
  Node39 [label="sharing_nodet\< key\l_type, mapped_type \>",height=0.2,width=0.4,color="black",URL="$classsharing__nodet.html",tooltip=" "];
  Node40 -> Node39 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" data" ,fontname="Helvetica"];
  Node40 [label="small_shared_n_way\l_ptrt\< d_containert\l\< key_type, mapped_type,\l equalT \>, d_leaft\< SN\l_TYPE_ARGS \>, d_internalt\l\< SN_TYPE_ARGS \> \>",height=0.2,width=0.4,color="black",URL="$classsmall__shared__n__way__ptrt.html",tooltip=" "];
  Node41 -> Node40 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" p" ,fontname="Helvetica"];
  Node41 [label="small_shared_n_way\l_pointee_baset\< N, Num \>",height=0.2,width=0.4,color="black",URL="$classsmall__shared__n__way__pointee__baset.html",tooltip=" "];
  Node42 -> Node40 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< d_containert\< key\l_type, mapped_type,\l equalT \>, d_leaft\< SN\l_TYPE_ARGS \>, d_internalt\l\< SN_TYPE_ARGS \> \>" ,fontname="Helvetica"];
  Node42 [label="small_shared_n_way\l_ptrt\< Ts \>",height=0.2,width=0.4,color="black",URL="$classsmall__shared__n__way__ptrt.html",tooltip="This class is similar to small_shared_ptrt and boost's intrusive_ptr."];
  Node41 -> Node42 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" p" ,fontname="Helvetica"];
  Node43 -> Node39 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< key_type, mapped\l_type \>" ,fontname="Helvetica"];
  Node43 [label="sharing_nodet\< keyT,\l valueT, equalT \>",height=0.2,width=0.4,color="black",URL="$classsharing__nodet.html",tooltip=" "];
  Node44 -> Node43 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" data" ,fontname="Helvetica"];
  Node44 [label="small_shared_n_way\l_ptrt\< d_containert\l\< keyT, valueT, equalT\l \>, d_leaft\< SN_TYPE_ARGS\l \>, d_internalt\< SN_TYPE\l_ARGS \> \>",height=0.2,width=0.4,color="black",URL="$classsmall__shared__n__way__ptrt.html",tooltip=" "];
  Node41 -> Node44 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" p" ,fontname="Helvetica"];
  Node42 -> Node44 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< d_containert\< keyT,\l valueT, equalT \>, d\l_leaft\< SN_TYPE_ARGS \>\l, d_internalt\< SN_TYPE\l_ARGS \> \>" ,fontname="Helvetica"];
  Node45 -> Node38 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irep_idt, std::pair\l\< ssa_exprt, std::size_t \> \>" ,fontname="Helvetica"];
  Node45 [label="sharing_mapt\< keyT,\l valueT, fail_if_equal,\l hashT, equalT \>",height=0.2,width=0.4,color="black",URL="$classsharing__mapt.html",tooltip="A map implemented as a tree where subtrees can be shared between different maps."];
  Node39 -> Node45 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" map" ,fontname="Helvetica"];
}
