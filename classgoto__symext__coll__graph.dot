digraph "goto_symext"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="goto_symext",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="The main class for the forward symbolic simulator."];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" outer_symbol_table" ,fontname="Helvetica"];
  Node2 [label="symbol_tablet",height=0.2,width=0.4,color="black",URL="$classsymbol__tablet.html",tooltip="The symbol table."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="symbol_table_baset",height=0.2,width=0.4,color="black",URL="$classsymbol__table__baset.html",tooltip="The symbol table base class interface."];
  Node4 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" symbol_base_map\nsymbol_module_map" ,fontname="Helvetica"];
  Node4 [label="std::multimap\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node5 -> Node4 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node5 [label="K",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node4 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node6 [label="T",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node7 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" symbols" ,fontname="Helvetica"];
  Node7 [label="std::unordered_map\l\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node5 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node6 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node8 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" internal_symbol_module\l_map\ninternal_symbol_base_map" ,fontname="Helvetica"];
  Node8 [label="std::multimap\< irep\l_idt, irep_idt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node8 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys\nelements" ,fontname="Helvetica"];
  Node9 [label="dstringt",height=0.2,width=0.4,color="black",URL="$classdstringt.html",tooltip="dstringt has one field, an unsigned integer no which is an index into a static table of strings."];
  Node4 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irep_idt, irep_idt \>" ,fontname="Helvetica"];
  Node10 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" log" ,fontname="Helvetica"];
  Node10 [label="messaget",height=0.2,width=0.4,color="black",URL="$classmessaget.html",tooltip="Class that provides messages with a built-in verbosity 'level'."];
  Node11 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" message_handler" ,fontname="Helvetica"];
  Node11 [label="message_handlert",height=0.2,width=0.4,color="black",URL="$classmessage__handlert.html",tooltip=" "];
  Node12 -> Node11 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" message_count" ,fontname="Helvetica"];
  Node12 [label="std::vector\< std::size_t \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node13 -> Node12 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< std::size_t \>" ,fontname="Helvetica"];
  Node13 [label="std::vector\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node6 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node14 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" cyan\nbright_yellow\nbold\nyellow\nbright_blue\nmagenta\nreset\nbright_magenta\nunderline\nblue\n..." ,fontname="Helvetica"];
  Node14 [label="messaget::commandt",height=0.2,width=0.4,color="black",URL="$classmessaget_1_1commandt.html",tooltip=" "];
  Node15 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" mstream" ,fontname="Helvetica"];
  Node15 [label="messaget::mstreamt",height=0.2,width=0.4,color="black",URL="$classmessaget_1_1mstreamt.html",tooltip=" "];
  Node16 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="std::ostringstream",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node17 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="std::basic_ostringstream\l\< char \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="std::basic_ostream\l\< Char \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node10 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" message" ,fontname="Helvetica"];
  Node21 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" source_location" ,fontname="Helvetica"];
  Node21 [label="source_locationt",height=0.2,width=0.4,color="black",URL="$classsource__locationt.html",tooltip=" "];
  Node22 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node23 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="red",URL="$classsharing__treet.html",tooltip=" "];
  Node28 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" eom" ,fontname="Helvetica"];
  Node28 [label="messaget::eomt",height=0.2,width=0.4,color="black",URL="$classmessaget_1_1eomt.html",tooltip=" "];
  Node29 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" path_storage" ,fontname="Helvetica"];
  Node29 [label="path_storaget",height=0.2,width=0.4,color="black",URL="$classpath__storaget.html",tooltip="Storage for symbolic execution paths to be resumed later."];
  Node30 -> Node29 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" safe_pointers" ,fontname="Helvetica"];
  Node30 [label="std::unordered_map\l\< dstringt, local_safe\l_pointerst \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node30 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node31 -> Node30 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node31 [label="local_safe_pointerst",height=0.2,width=0.4,color="black",URL="$classlocal__safe__pointerst.html",tooltip="A very simple, cheap analysis to determine when dereference operations are trivially guarded by a che..."];
  Node32 -> Node31 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" non_null_expressions" ,fontname="Helvetica"];
  Node32 [label="std::map\< unsigned,\l std::set\< exprt, local\l_safe_pointerst::type_comparet \> \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node33 -> Node32 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node33 [label="std::set\< exprt, local\l_safe_pointerst::type\l_comparet \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node34 -> Node33 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node34 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node22 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 -> Node30 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt, local_safe\l_pointerst \>" ,fontname="Helvetica"];
  Node37 -> Node29 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dirty" ,fontname="Helvetica"];
  Node37 [label="incremental_dirtyt",height=0.2,width=0.4,color="black",URL="$classincremental__dirtyt.html",tooltip="Wrapper for dirtyt that permits incremental population, ensuring each function is analysed exactly on..."];
  Node38 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dirty_processed_functions" ,fontname="Helvetica"];
  Node38 [label="std::unordered_set\l\< dstringt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node38 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node39 -> Node38 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt \>" ,fontname="Helvetica"];
  Node39 [label="std::unordered_set\< K \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node5 -> Node39 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node40 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dirty" ,fontname="Helvetica"];
  Node40 [label="dirtyt",height=0.2,width=0.4,color="black",URL="$classdirtyt.html",tooltip="Dirty variables are ones which have their address taken so we can't reliably work out where they may ..."];
  Node38 -> Node40 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dirty" ,fontname="Helvetica"];
  Node41 -> Node29 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" build_symex_nondet" ,fontname="Helvetica"];
  Node41 [label="symex_nondet_generatort",height=0.2,width=0.4,color="black",URL="$classsymex__nondet__generatort.html",tooltip="Functor generating fresh nondet symbols."];
  Node42 -> Node29 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" loop_analysis_map" ,fontname="Helvetica"];
  Node42 [label="std::unordered_map\l\< dstringt, std::shared\l_ptr\< lexical_loops_templatet \> \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node43 -> Node42 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node43 [label="std::shared_ptr\< lexical\l_loops_templatet \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node44 -> Node43 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node44 [label="lexical_loops_templatet\l\< P, T \>",height=0.2,width=0.4,color="red",URL="$classlexical__loops__templatet.html",tooltip="Main driver for working out if a class (normally goto_programt) has any lexical loops."];
  Node49 -> Node43 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< lexical_loops_templatet \>" ,fontname="Helvetica"];
  Node49 [label="std::shared_ptr\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node6 -> Node49 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node9 -> Node42 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node7 -> Node42 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt, std::shared\l_ptr\< lexical_loops_templatet \> \>" ,fontname="Helvetica"];
  Node50 -> Node29 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" l2_indices\nl1_indices" ,fontname="Helvetica"];
  Node50 [label="std::unordered_map\l\< irep_idt, std::size_t \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node50 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node7 -> Node50 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irep_idt, std::size_t \>" ,fontname="Helvetica"];
  Node51 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" guard_manager" ,fontname="Helvetica"];
  Node51 [label="guard_expr_managert",height=0.2,width=0.4,color="black",URL="$structguard__expr__managert.html",tooltip="This is unused by this implementation of guards, but can be used by other implementations of the same..."];
  Node52 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ns" ,fontname="Helvetica"];
  Node52 [label="namespacet",height=0.2,width=0.4,color="black",URL="$classnamespacet.html",tooltip="A namespacet is essentially one or two symbol tables bound together, to allow for symbol lookups in t..."];
  Node53 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="namespace_baset",height=0.2,width=0.4,color="black",URL="$classnamespace__baset.html",tooltip="Basic interface for a namespace."];
  Node3 -> Node52 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" symbol_table1\nsymbol_table2" ,fontname="Helvetica"];
  Node54 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" target" ,fontname="Helvetica"];
  Node54 [label="symex_target_equationt",height=0.2,width=0.4,color="black",URL="$classsymex__target__equationt.html",tooltip="Inheriting the interface of symex_targett this class represents the SSA form of the input program as ..."];
  Node55 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="symex_targett",height=0.2,width=0.4,color="black",URL="$classsymex__targett.html",tooltip="The interface of the target container for symbolic execution to record its symbolic steps into."];
  Node10 -> Node54 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" log" ,fontname="Helvetica"];
  Node56 -> Node54 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" merge_irep" ,fontname="Helvetica"];
  Node56 [label="merge_irept",height=0.2,width=0.4,color="black",URL="$classmerge__irept.html",tooltip=" "];
  Node57 -> Node56 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" irep_store" ,fontname="Helvetica"];
  Node57 [label="std::unordered_set\l\< irept, irep_hash \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node22 -> Node57 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node39 -> Node57 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, irep_hash \>" ,fontname="Helvetica"];
  Node58 -> Node54 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" SSA_steps" ,fontname="Helvetica"];
  Node58 [label="std::list\< SSA_stept \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node59 -> Node58 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node59 [label="SSA_stept",height=0.2,width=0.4,color="black",URL="$class_s_s_a__stept.html",tooltip="Single SSA step in the equation."];
  Node60 -> Node59 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" converted_io_args\nio_args" ,fontname="Helvetica"];
  Node60 [label="std::list\< exprt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node34 -> Node60 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node61 -> Node60 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< exprt \>" ,fontname="Helvetica"];
  Node61 [label="std::list\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node6 -> Node61 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node62 -> Node59 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ssa_lhs" ,fontname="Helvetica"];
  Node62 [label="ssa_exprt",height=0.2,width=0.4,color="black",URL="$classssa__exprt.html",tooltip="Expression providing an SSA-renamed symbol of expressions."];
  Node63 -> Node62 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node63 [label="symbol_exprt",height=0.2,width=0.4,color="black",URL="$classsymbol__exprt.html",tooltip="Expression to hold a symbol (variable)"];
  Node64 -> Node63 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node64 [label="nullary_exprt",height=0.2,width=0.4,color="red",URL="$classnullary__exprt.html",tooltip="An expression without operands."];
  Node9 -> Node59 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" called_function\nformat_string\nio_id" ,fontname="Helvetica"];
  Node66 -> Node59 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" comment" ,fontname="Helvetica"];
  Node66 [label="std::string",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node34 -> Node59 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ssa_full_lhs\nguard\ncond_handle\nguard_handle\nssa_rhs\ncond_expr\noriginal_full_lhs" ,fontname="Helvetica"];
  Node68 -> Node59 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" source" ,fontname="Helvetica"];
  Node68 [label="symex_targett::sourcet",height=0.2,width=0.4,color="black",URL="$structsymex__targett_1_1sourcet.html",tooltip="Identifies source in the context of symbolic execution."];
  Node9 -> Node68 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" function_id" ,fontname="Helvetica"];
  Node69 -> Node59 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" converted_function\l_arguments\nssa_function_arguments" ,fontname="Helvetica"];
  Node69 [label="std::vector\< exprt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node34 -> Node69 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node13 -> Node69 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< exprt \>" ,fontname="Helvetica"];
  Node61 -> Node58 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< SSA_stept \>" ,fontname="Helvetica"];
  Node70 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" instruction_local_symbols" ,fontname="Helvetica"];
  Node70 [label="std::vector\< symbol\l_exprt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node63 -> Node70 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node13 -> Node70 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< symbol_exprt \>" ,fontname="Helvetica"];
  Node9 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" language_mode" ,fontname="Helvetica"];
  Node71 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" complexity_module" ,fontname="Helvetica"];
  Node71 [label="complexity_limitert",height=0.2,width=0.4,color="black",URL="$classcomplexity__limitert.html",tooltip="Symex complexity module."];
  Node72 -> Node71 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" default_transformation" ,fontname="Helvetica"];
  Node72 [label="symex_complexity_limit\l_exceeded_actiont",height=0.2,width=0.4,color="black",URL="$classsymex__complexity__limit__exceeded__actiont.html",tooltip="Default heuristic transformation that cancels branches when complexity has been breached."];
  Node10 -> Node71 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" log" ,fontname="Helvetica"];
  Node73 -> Node71 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" violation_transformations" ,fontname="Helvetica"];
  Node73 [label="std::vector\< symex\l_complexity_limit_exceeded\l_actiont \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node72 -> Node73 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node13 -> Node73 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< symex_complexity\l_limit_exceeded_actiont \>" ,fontname="Helvetica"];
  Node74 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" symex_config" ,fontname="Helvetica"];
  Node74 [label="symex_configt",height=0.2,width=0.4,color="black",URL="$structsymex__configt.html",tooltip="Configuration used for a symbolic execution."];
}
