digraph "binary_exprt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="binary_exprt",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="A base class for binary expressions."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="expr_protectedt",height=0.2,width=0.4,color="black",URL="$classexpr__protectedt.html",tooltip="Base class for all expressions."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, forward_list\l_as_mapt\< irep_idt, irept \> \>" ,fontname="Helvetica"];
  Node6 [label="sharing_treet\< derivedt,\l named_subtreest \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip="Base class for tree-like data structures with sharing."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="binary_predicate_exprt",height=0.2,width=0.4,color="black",URL="$classbinary__predicate__exprt.html",tooltip="A base class for expressions that are predicates, i.e., Boolean-typed, and that take exactly two argu..."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="binary_overflow_exprt",height=0.2,width=0.4,color="black",URL="$classbinary__overflow__exprt.html",tooltip="A Boolean expression returning true, iff operation kind would result in an overflow when applied to o..."];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="minus_overflow_exprt",height=0.2,width=0.4,color="black",URL="$classminus__overflow__exprt.html",tooltip=" "];
  Node8 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="mult_overflow_exprt",height=0.2,width=0.4,color="black",URL="$classmult__overflow__exprt.html",tooltip=" "];
  Node8 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="plus_overflow_exprt",height=0.2,width=0.4,color="black",URL="$classplus__overflow__exprt.html",tooltip=" "];
  Node8 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="shl_overflow_exprt",height=0.2,width=0.4,color="black",URL="$classshl__overflow__exprt.html",tooltip=" "];
  Node7 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="binary_relation_exprt",height=0.2,width=0.4,color="black",URL="$classbinary__relation__exprt.html",tooltip="A base class for relations, i.e., binary predicates whose two operands have the same type."];
  Node13 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="equal_exprt",height=0.2,width=0.4,color="black",URL="$classequal__exprt.html",tooltip="Equality."];
  Node13 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="greater_than_exprt",height=0.2,width=0.4,color="black",URL="$classgreater__than__exprt.html",tooltip="Binary greater than operator expression."];
  Node13 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="greater_than_or_equal\l_exprt",height=0.2,width=0.4,color="black",URL="$classgreater__than__or__equal__exprt.html",tooltip="Binary greater than or equal operator expression."];
  Node13 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="ieee_float_equal_exprt",height=0.2,width=0.4,color="black",URL="$classieee__float__equal__exprt.html",tooltip="IEEE-floating-point equality."];
  Node13 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="ieee_float_notequal\l_exprt",height=0.2,width=0.4,color="black",URL="$classieee__float__notequal__exprt.html",tooltip="IEEE floating-point disequality."];
  Node13 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="less_than_exprt",height=0.2,width=0.4,color="black",URL="$classless__than__exprt.html",tooltip="Binary less than operator expression."];
  Node13 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="less_than_or_equal\l_exprt",height=0.2,width=0.4,color="black",URL="$classless__than__or__equal__exprt.html",tooltip="Binary less than or equal operator expression."];
  Node13 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="notequal_exprt",height=0.2,width=0.4,color="black",URL="$classnotequal__exprt.html",tooltip="Disequality."];
  Node7 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="extractbit_exprt",height=0.2,width=0.4,color="black",URL="$classextractbit__exprt.html",tooltip="Extracts a single bit of a bit-vector operand."];
  Node7 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="java_instanceof_exprt",height=0.2,width=0.4,color="black",URL="$classjava__instanceof__exprt.html",tooltip=" "];
  Node7 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="r_or_w_ok_exprt",height=0.2,width=0.4,color="black",URL="$classr__or__w__ok__exprt.html",tooltip="A base class for a predicate that indicates that an address range is ok to read or write or both."];
  Node24 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="r_ok_exprt",height=0.2,width=0.4,color="black",URL="$classr__ok__exprt.html",tooltip="A predicate that indicates that an address range is ok to read."];
  Node24 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="w_ok_exprt",height=0.2,width=0.4,color="black",URL="$classw__ok__exprt.html",tooltip="A predicate that indicates that an address range is ok to write."];
  Node1 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="binding_exprt",height=0.2,width=0.4,color="black",URL="$classbinding__exprt.html",tooltip="A base class for variable bindings (quantifiers, let, lambda)"];
  Node27 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="array_comprehension\l_exprt",height=0.2,width=0.4,color="black",URL="$classarray__comprehension__exprt.html",tooltip="Expression to define a mapping from an argument (index) to elements."];
  Node27 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="lambda_exprt",height=0.2,width=0.4,color="black",URL="$classlambda__exprt.html",tooltip="A (mathematical) lambda expression."];
  Node27 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="quantifier_exprt",height=0.2,width=0.4,color="black",URL="$classquantifier__exprt.html",tooltip="A base class for quantifier expressions."];
  Node30 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="exists_exprt",height=0.2,width=0.4,color="black",URL="$classexists__exprt.html",tooltip="An exists expression."];
  Node30 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="forall_exprt",height=0.2,width=0.4,color="black",URL="$classforall__exprt.html",tooltip="A forall expression."];
  Node1 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="byte_extract_exprt",height=0.2,width=0.4,color="black",URL="$classbyte__extract__exprt.html",tooltip="Expression of type type extracted from some object op starting at position offset (given in number of..."];
  Node1 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="complex_exprt",height=0.2,width=0.4,color="black",URL="$classcomplex__exprt.html",tooltip="Complex constructor from a pair of numbers."];
  Node1 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="constant_interval_exprt",height=0.2,width=0.4,color="black",URL="$classconstant__interval__exprt.html",tooltip="Represents an interval of values."];
  Node1 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="cpp_static_assertt",height=0.2,width=0.4,color="black",URL="$classcpp__static__assertt.html",tooltip=" "];
  Node1 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="div_exprt",height=0.2,width=0.4,color="black",URL="$classdiv__exprt.html",tooltip="Division."];
  Node1 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="dynamic_object_exprt",height=0.2,width=0.4,color="black",URL="$classdynamic__object__exprt.html",tooltip="Representation of heap-allocated objects."];
  Node1 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="element_address_exprt",height=0.2,width=0.4,color="black",URL="$classelement__address__exprt.html",tooltip="Operator to return the address of an array element relative to a base address."];
  Node1 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="euclidean_mod_exprt",height=0.2,width=0.4,color="black",URL="$classeuclidean__mod__exprt.html",tooltip="Boute's Euclidean definition of Modulo – to match SMT-LIB2."];
  Node1 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="evaluate_exprt",height=0.2,width=0.4,color="black",URL="$classevaluate__exprt.html",tooltip=" "];
  Node1 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="factorial_power_exprt",height=0.2,width=0.4,color="black",URL="$classfactorial__power__exprt.html",tooltip="Falling factorial power."];
  Node1 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node43 [label="floatbv_typecast_exprt",height=0.2,width=0.4,color="black",URL="$classfloatbv__typecast__exprt.html",tooltip="Semantic type conversion from/to floating-point formats."];
  Node1 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="function_application\l_exprt",height=0.2,width=0.4,color="black",URL="$classfunction__application__exprt.html",tooltip="Application of (mathematical) function."];
  Node1 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="implies_exprt",height=0.2,width=0.4,color="black",URL="$classimplies__exprt.html",tooltip="Boolean implication."];
  Node1 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node46 [label="index_exprt",height=0.2,width=0.4,color="black",URL="$classindex__exprt.html",tooltip="Array index operator."];
  Node1 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="let_exprt",height=0.2,width=0.4,color="black",URL="$classlet__exprt.html",tooltip="A let expression."];
  Node1 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="minus_exprt",height=0.2,width=0.4,color="black",URL="$classminus__exprt.html",tooltip="Binary minus."];
  Node1 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="mod_exprt",height=0.2,width=0.4,color="black",URL="$classmod__exprt.html",tooltip="Modulo defined as lhs-(rhs * truncate(lhs/rhs))."];
  Node1 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="named_term_exprt",height=0.2,width=0.4,color="black",URL="$classnamed__term__exprt.html",tooltip="Expression that introduces a new symbol that is equal to the operand."];
  Node1 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node51 [label="object_descriptor_exprt",height=0.2,width=0.4,color="black",URL="$classobject__descriptor__exprt.html",tooltip="Split an expression into a base object and a (byte) offset."];
  Node1 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node52 [label="power_exprt",height=0.2,width=0.4,color="black",URL="$classpower__exprt.html",tooltip="Exponentiation."];
  Node1 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="replication_exprt",height=0.2,width=0.4,color="black",URL="$classreplication__exprt.html",tooltip="Bit-vector replication."];
  Node1 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node54 [label="saturating_minus_exprt",height=0.2,width=0.4,color="black",URL="$classsaturating__minus__exprt.html",tooltip="Saturating subtraction expression."];
  Node1 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="saturating_plus_exprt",height=0.2,width=0.4,color="black",URL="$classsaturating__plus__exprt.html",tooltip="The saturating plus expression."];
  Node1 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node56 [label="shift_exprt",height=0.2,width=0.4,color="black",URL="$classshift__exprt.html",tooltip="A base class for shift and rotate operators."];
  Node56 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node57 [label="ashr_exprt",height=0.2,width=0.4,color="black",URL="$classashr__exprt.html",tooltip="Arithmetic right shift."];
  Node56 -> Node58 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node58 [label="lshr_exprt",height=0.2,width=0.4,color="black",URL="$classlshr__exprt.html",tooltip="Logical right shift."];
  Node56 -> Node59 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node59 [label="shl_exprt",height=0.2,width=0.4,color="black",URL="$classshl__exprt.html",tooltip="Left shift."];
}
