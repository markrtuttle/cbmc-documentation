digraph "typet"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="typet",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="The type of an expression, extends irept."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, forward_list\l_as_mapt\< irep_idt, irept \> \>" ,fontname="Helvetica"];
  Node4 [label="sharing_treet\< derivedt,\l named_subtreest \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip="Base class for tree-like data structures with sharing."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="annotated_typet",height=0.2,width=0.4,color="black",URL="$classannotated__typet.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="bitvector_typet",height=0.2,width=0.4,color="black",URL="$classbitvector__typet.html",tooltip="Base class of fixed-width bit-vector types."];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="bv_typet",height=0.2,width=0.4,color="black",URL="$classbv__typet.html",tooltip="Fixed-width bit-vector without numerical interpretation."];
  Node6 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="c_bit_field_typet",height=0.2,width=0.4,color="black",URL="$classc__bit__field__typet.html",tooltip="Type for C bit fields These are both 'bitvector_typet' (they have a width) and 'type_with_subtypet' (..."];
  Node6 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="c_bool_typet",height=0.2,width=0.4,color="black",URL="$classc__bool__typet.html",tooltip="The C/C++ Booleans."];
  Node6 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="fixedbv_typet",height=0.2,width=0.4,color="black",URL="$classfixedbv__typet.html",tooltip="Fixed-width bit-vector with signed fixed-point interpretation."];
  Node6 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="floatbv_typet",height=0.2,width=0.4,color="black",URL="$classfloatbv__typet.html",tooltip="Fixed-width bit-vector with IEEE floating-point interpretation."];
  Node6 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="integer_bitvector_typet",height=0.2,width=0.4,color="black",URL="$classinteger__bitvector__typet.html",tooltip="Fixed-width bit-vector representing a signed or unsigned integer."];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="signedbv_typet",height=0.2,width=0.4,color="black",URL="$classsignedbv__typet.html",tooltip="Fixed-width bit-vector with two's complement interpretation."];
  Node12 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="unsignedbv_typet",height=0.2,width=0.4,color="black",URL="$classunsignedbv__typet.html",tooltip="Fixed-width bit-vector with unsigned binary interpretation."];
  Node6 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="pointer_typet",height=0.2,width=0.4,color="black",URL="$classpointer__typet.html",tooltip="The pointer type These are both 'bitvector_typet' (they have a width) and 'type_with_subtypet' (they ..."];
  Node15 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="reference_typet",height=0.2,width=0.4,color="red",URL="$classreference__typet.html",tooltip="The reference type."];
  Node16 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="java_generic_parametert",height=0.2,width=0.4,color="black",URL="$classjava__generic__parametert.html",tooltip="Reference that points to a java_generic_parameter_tagt."];
  Node16 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="java_generic_typet",height=0.2,width=0.4,color="black",URL="$classjava__generic__typet.html",tooltip="Reference that points to a java_generic_struct_tag_typet."];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="bool_typet",height=0.2,width=0.4,color="black",URL="$classbool__typet.html",tooltip="The Boolean type."];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="code_typet",height=0.2,width=0.4,color="black",URL="$classcode__typet.html",tooltip="Base type of functions."];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="code_with_contract\l_typet",height=0.2,width=0.4,color="black",URL="$classcode__with__contract__typet.html",tooltip=" "];
  Node21 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="java_method_typet",height=0.2,width=0.4,color="black",URL="$classjava__method__typet.html",tooltip=" "];
  Node21 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="jsil_builtin_code_typet",height=0.2,width=0.4,color="black",URL="$classjsil__builtin__code__typet.html",tooltip=" "];
  Node21 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="jsil_spec_code_typet",height=0.2,width=0.4,color="black",URL="$classjsil__spec__code__typet.html",tooltip=" "];
  Node1 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="cpp_enum_typet",height=0.2,width=0.4,color="black",URL="$classcpp__enum__typet.html",tooltip=" "];
  Node1 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="empty_typet",height=0.2,width=0.4,color="black",URL="$classempty__typet.html",tooltip="The empty type."];
  Node1 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="enumeration_typet",height=0.2,width=0.4,color="black",URL="$classenumeration__typet.html",tooltip="An enumeration type, i.e., a type with elements (not to be confused with C enums)"];
  Node1 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="integer_typet",height=0.2,width=0.4,color="black",URL="$classinteger__typet.html",tooltip="Unbounded, signed integers (mathematical integers, not bitvectors)"];
  Node1 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="natural_typet",height=0.2,width=0.4,color="black",URL="$classnatural__typet.html",tooltip="Natural numbers including zero (mathematical integers, not bitvectors)"];
  Node1 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="range_typet",height=0.2,width=0.4,color="black",URL="$classrange__typet.html",tooltip="A type for subranges of integers."];
  Node1 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="rational_typet",height=0.2,width=0.4,color="black",URL="$classrational__typet.html",tooltip="Unbounded, signed rational numbers."];
  Node1 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="real_typet",height=0.2,width=0.4,color="black",URL="$classreal__typet.html",tooltip="Unbounded, signed real numbers."];
  Node1 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="state_typet",height=0.2,width=0.4,color="black",URL="$classstate__typet.html",tooltip=" "];
  Node1 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="string_typet",height=0.2,width=0.4,color="black",URL="$classstring__typet.html",tooltip="String type."];
  Node1 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="struct_union_typet",height=0.2,width=0.4,color="black",URL="$classstruct__union__typet.html",tooltip="Base type for structs and unions."];
  Node36 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="struct_typet",height=0.2,width=0.4,color="black",URL="$classstruct__typet.html",tooltip="Structure type, corresponds to C style structs."];
  Node37 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="class_typet",height=0.2,width=0.4,color="red",URL="$classclass__typet.html",tooltip="Class type."];
  Node37 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="refined_string_typet",height=0.2,width=0.4,color="black",URL="$classrefined__string__typet.html",tooltip=" "];
  Node36 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node43 [label="union_typet",height=0.2,width=0.4,color="black",URL="$classunion__typet.html",tooltip="The union type."];
  Node43 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="jsil_union_typet",height=0.2,width=0.4,color="black",URL="$classjsil__union__typet.html",tooltip=" "];
  Node1 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="tag_typet",height=0.2,width=0.4,color="black",URL="$classtag__typet.html",tooltip="A tag-based type, i.e., typet with an identifier."];
  Node45 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node46 [label="c_enum_tag_typet",height=0.2,width=0.4,color="black",URL="$classc__enum__tag__typet.html",tooltip="C enum tag type, i.e., c_enum_typet with an identifier."];
  Node45 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="struct_tag_typet",height=0.2,width=0.4,color="black",URL="$classstruct__tag__typet.html",tooltip="A struct tag type, i.e., struct_typet with an identifier."];
  Node47 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="java_generic_parameter_tagt",height=0.2,width=0.4,color="black",URL="$classjava__generic__parameter__tagt.html",tooltip="Class to hold a Java generic type parameter (also called type variable), e.g., T in List<T>."];
  Node47 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="java_generic_struct\l_tag_typet",height=0.2,width=0.4,color="black",URL="$classjava__generic__struct__tag__typet.html",tooltip="Class to hold type with generic type arguments, for example java.util.List in either a reference of t..."];
  Node45 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="union_tag_typet",height=0.2,width=0.4,color="black",URL="$classunion__tag__typet.html",tooltip="A union tag type, i.e., union_typet with an identifier."];
  Node1 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node51 [label="template_parameter\l_symbol_typet",height=0.2,width=0.4,color="black",URL="$structtemplate__parameter__symbol__typet.html",tooltip="a template parameter symbol that is a type"];
  Node1 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node52 [label="template_typet",height=0.2,width=0.4,color="black",URL="$classtemplate__typet.html",tooltip=" "];
  Node1 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="type_with_subtypest",height=0.2,width=0.4,color="black",URL="$classtype__with__subtypest.html",tooltip="Type with multiple subtypes."];
  Node53 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node54 [label="mathematical_function\l_typet",height=0.2,width=0.4,color="black",URL="$classmathematical__function__typet.html",tooltip="A type for mathematical functions (do not confuse with functions/methods in code)"];
  Node53 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="merged_typet",height=0.2,width=0.4,color="black",URL="$classmerged__typet.html",tooltip="holds a combination of types"];
  Node1 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node56 [label="type_with_subtypet",height=0.2,width=0.4,color="black",URL="$classtype__with__subtypet.html",tooltip="Type with a single subtype."];
  Node56 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node57 [label="already_typechecked\l_typet",height=0.2,width=0.4,color="black",URL="$classalready__typechecked__typet.html",tooltip=" "];
  Node56 -> Node58 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node58 [label="array_typet",height=0.2,width=0.4,color="black",URL="$classarray__typet.html",tooltip="Arrays with given size."];
  Node56 -> Node59 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node59 [label="c_enum_typet",height=0.2,width=0.4,color="black",URL="$classc__enum__typet.html",tooltip="The type of C enums."];
  Node56 -> Node60 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node60 [label="complex_typet",height=0.2,width=0.4,color="black",URL="$classcomplex__typet.html",tooltip="Complex numbers made of pair of given subtype."];
  Node56 -> Node61 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node61 [label="vector_typet",height=0.2,width=0.4,color="black",URL="$classvector__typet.html",tooltip="The vector type."];
  Node1 -> Node62 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node62 [label="typedef_typet",height=0.2,width=0.4,color="black",URL="$classtypedef__typet.html",tooltip="A typedef."];
  Node1 -> Node63 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node63 [label="uninitialized_typet",height=0.2,width=0.4,color="black",URL="$classuninitialized__typet.html",tooltip=" "];
}
