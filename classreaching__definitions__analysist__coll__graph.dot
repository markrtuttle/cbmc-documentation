digraph "reaching_definitions_analysist"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="reaching_definitions\l_analysist",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="concurrency_aware_ait\l\< rd_range_domaint \>",height=0.2,width=0.4,color="black",URL="$classconcurrency__aware__ait.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="ait\< rd_range_domaint \>",height=0.2,width=0.4,color="black",URL="$classait.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="ai_recursive_interproceduralt",height=0.2,width=0.4,color="black",URL="$classai__recursive__interproceduralt.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="ai_baset",height=0.2,width=0.4,color="black",URL="$classai__baset.html",tooltip="This is the basic interface of the abstract interpreter with default implementations of the core func..."];
  Node6 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" message_handler" ,fontname="Helvetica"];
  Node6 [label="message_handlert",height=0.2,width=0.4,color="black",URL="$classmessage__handlert.html",tooltip=" "];
  Node7 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" message_count" ,fontname="Helvetica"];
  Node7 [label="std::vector\< std::size_t \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< std::size_t \>" ,fontname="Helvetica"];
  Node8 [label="std::vector\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node9 -> Node8 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node9 [label="T",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node10 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" domain_factory" ,fontname="Helvetica"];
  Node10 [label="std::unique_ptr\< ai\l_domain_factory_baset \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node11 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node11 [label="ai_domain_factory_baset",height=0.2,width=0.4,color="black",URL="$classai__domain__factory__baset.html",tooltip=" "];
  Node12 -> Node10 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ai_domain_factory\l_baset \>" ,fontname="Helvetica"];
  Node12 [label="std::unique_ptr\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node9 -> Node12 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node13 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" storage" ,fontname="Helvetica"];
  Node13 [label="std::unique_ptr\< ai\l_storage_baset \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node14 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node14 [label="ai_storage_baset",height=0.2,width=0.4,color="black",URL="$classai__storage__baset.html",tooltip="This is the basic interface for storing domains."];
  Node12 -> Node13 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ai_storage_baset \>" ,fontname="Helvetica"];
  Node15 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" history_factory" ,fontname="Helvetica"];
  Node15 [label="std::unique_ptr\< ai\l_history_factory_baset \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node16 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node16 [label="ai_history_factory\l_baset",height=0.2,width=0.4,color="black",URL="$classai__history__factory__baset.html",tooltip="As more detailed histories can get complex (for example, nested loops or deep, mutually recursive cal..."];
  Node12 -> Node15 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ai_history_factory\l_baset \>" ,fontname="Helvetica"];
  Node17 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" no_logging" ,fontname="Helvetica"];
  Node17 [label="null_message_handlert",height=0.2,width=0.4,color="black",URL="$classnull__message__handlert.html",tooltip=" "];
  Node6 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< rd_range_domaint \>" ,fontname="Helvetica"];
  Node18 [label="ait\< domainT \>",height=0.2,width=0.4,color="black",URL="$classait.html",tooltip="ait supplies three of the four components needed: an abstract interpreter (in this case handling func..."];
  Node4 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 -> Node18 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" no_logging" ,fontname="Helvetica"];
  Node19 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< rd_range_domaint \>" ,fontname="Helvetica"];
  Node19 [label="concurrency_aware_ait\l\< domainT \>",height=0.2,width=0.4,color="black",URL="$classconcurrency__aware__ait.html",tooltip="Base class for concurrency-aware abstract interpretation."];
  Node18 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="sparse_bitvector_analysist\l\< reaching_definitiont \>",height=0.2,width=0.4,color="black",URL="$classsparse__bitvector__analysist.html",tooltip=" "];
  Node21 -> Node20 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" value_map" ,fontname="Helvetica"];
  Node21 [label="std::unordered_map\l\< dstringt, inner_mapt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node22 -> Node21 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node22 [label="dstringt",height=0.2,width=0.4,color="black",URL="$classdstringt.html",tooltip="dstringt has one field, an unsigned integer no which is an index into a static table of strings."];
  Node23 -> Node21 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt, inner_mapt \>" ,fontname="Helvetica"];
  Node23 [label="std::unordered_map\l\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node24 -> Node23 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node24 [label="K",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node23 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node25 -> Node20 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" values" ,fontname="Helvetica"];
  Node25 [label="std::vector\< typename\l inner_mapt::const_iterator \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node25 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< typename inner_mapt\l::const_iterator \>" ,fontname="Helvetica"];
  Node26 -> Node20 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< reaching_definitiont \>" ,fontname="Helvetica"];
  Node26 [label="sparse_bitvector_analysist\< V \>",height=0.2,width=0.4,color="black",URL="$classsparse__bitvector__analysist.html",tooltip="An instance of this class provides an assignment of unique numeric ID to each inserted reaching_defin..."];
  Node21 -> Node26 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" value_map" ,fontname="Helvetica"];
  Node25 -> Node26 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" values" ,fontname="Helvetica"];
  Node27 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" is_threaded" ,fontname="Helvetica"];
  Node27 [label="std::unique_ptr\< is\l_threadedt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node28 -> Node27 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node28 [label="is_threadedt",height=0.2,width=0.4,color="black",URL="$classis__threadedt.html",tooltip=" "];
  Node29 -> Node28 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" is_threaded_set" ,fontname="Helvetica"];
  Node29 [label="std::set\< goto_programt\l::const_targett \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node30 -> Node29 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node30 [label="std::list\< T \>::const\l_iterator",height=0.2,width=0.4,color="grey75",tooltip="STL iterator class."];
  Node31 -> Node29 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< goto_programt::const\l_targett \>" ,fontname="Helvetica"];
  Node31 [label="std::set\< K \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node24 -> Node31 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node12 -> Node27 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< is_threadedt \>" ,fontname="Helvetica"];
  Node32 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" value_sets" ,fontname="Helvetica"];
  Node32 [label="std::unique_ptr\< value\l_setst \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node33 -> Node32 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node33 [label="value_setst",height=0.2,width=0.4,color="black",URL="$classvalue__setst.html",tooltip=" "];
  Node12 -> Node32 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< value_setst \>" ,fontname="Helvetica"];
  Node34 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ns" ,fontname="Helvetica"];
  Node34 [label="namespacet",height=0.2,width=0.4,color="black",URL="$classnamespacet.html",tooltip="A namespacet is essentially one or two symbol tables bound together, to allow for symbol lookups in t..."];
  Node35 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="namespace_baset",height=0.2,width=0.4,color="black",URL="$classnamespace__baset.html",tooltip="Basic interface for a namespace."];
  Node36 -> Node34 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" symbol_table1\nsymbol_table2" ,fontname="Helvetica"];
  Node36 [label="symbol_table_baset",height=0.2,width=0.4,color="black",URL="$classsymbol__table__baset.html",tooltip="The symbol table base class interface."];
  Node37 -> Node36 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" symbol_base_map\nsymbol_module_map" ,fontname="Helvetica"];
  Node37 [label="std::multimap\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node24 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node9 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node23 -> Node36 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" symbols" ,fontname="Helvetica"];
  Node38 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" is_dirty" ,fontname="Helvetica"];
  Node38 [label="std::unique_ptr\< dirtyt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node39 -> Node38 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node39 [label="dirtyt",height=0.2,width=0.4,color="black",URL="$classdirtyt.html",tooltip="Dirty variables are ones which have their address taken so we can't reliably work out where they may ..."];
  Node40 -> Node39 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" dirty" ,fontname="Helvetica"];
  Node40 [label="std::unordered_set\l\< dstringt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node22 -> Node40 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node41 -> Node40 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dstringt \>" ,fontname="Helvetica"];
  Node41 [label="std::unordered_set\< K \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node24 -> Node41 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node12 -> Node38 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< dirtyt \>" ,fontname="Helvetica"];
}
