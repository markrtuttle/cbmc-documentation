digraph "unary_exprt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="unary_exprt",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Generic base class for unary expressions."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="expr_protectedt",height=0.2,width=0.4,color="black",URL="$classexpr__protectedt.html",tooltip="Base class for all expressions."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, forward_list\l_as_mapt\< irep_idt, irept \> \>" ,fontname="Helvetica"];
  Node6 [label="sharing_treet\< derivedt,\l named_subtreest \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip="Base class for tree-like data structures with sharing."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="abs_exprt",height=0.2,width=0.4,color="black",URL="$classabs__exprt.html",tooltip="Absolute value."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="address_of_exprt",height=0.2,width=0.4,color="black",URL="$classaddress__of__exprt.html",tooltip="Operator to return the address of an object."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="annotated_pointer_constant\l_exprt",height=0.2,width=0.4,color="black",URL="$classannotated__pointer__constant__exprt.html",tooltip="Pointer-typed bitvector constant annotated with the pointer expression that the bitvector is the nume..."];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="array_of_exprt",height=0.2,width=0.4,color="black",URL="$classarray__of__exprt.html",tooltip="Array constructor from single element."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="bitnot_exprt",height=0.2,width=0.4,color="black",URL="$classbitnot__exprt.html",tooltip="Bit-wise negation of bit-vectors."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="bitreverse_exprt",height=0.2,width=0.4,color="black",URL="$classbitreverse__exprt.html",tooltip="Reverse the order of bits in a bit-vector."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="bswap_exprt",height=0.2,width=0.4,color="black",URL="$classbswap__exprt.html",tooltip="The byte swap expression."];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="complex_imag_exprt",height=0.2,width=0.4,color="black",URL="$classcomplex__imag__exprt.html",tooltip="Imaginary part of the expression describing a complex number."];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="complex_real_exprt",height=0.2,width=0.4,color="black",URL="$classcomplex__real__exprt.html",tooltip="Real part of the expression describing a complex number."];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="count_leading_zeros\l_exprt",height=0.2,width=0.4,color="black",URL="$classcount__leading__zeros__exprt.html",tooltip="The count leading zeros (counting the number of zero bits starting from the most-significant bit) exp..."];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="count_trailing_zeros\l_exprt",height=0.2,width=0.4,color="black",URL="$classcount__trailing__zeros__exprt.html",tooltip="The count trailing zeros (counting the number of zero bits starting from the least-significant bit) e..."];
  Node1 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="dereference_exprt",height=0.2,width=0.4,color="black",URL="$classdereference__exprt.html",tooltip="Operator to dereference a pointer."];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="field_address_exprt",height=0.2,width=0.4,color="black",URL="$classfield__address__exprt.html",tooltip="Operator to return the address of a field relative to a base address."];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="history_exprt",height=0.2,width=0.4,color="black",URL="$classhistory__exprt.html",tooltip="A class for an expression that indicates a history variable."];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="member_exprt",height=0.2,width=0.4,color="black",URL="$classmember__exprt.html",tooltip="Extract member of struct or union."];
  Node1 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="not_exprt",height=0.2,width=0.4,color="black",URL="$classnot__exprt.html",tooltip="Boolean negation."];
  Node1 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="object_size_exprt",height=0.2,width=0.4,color="black",URL="$classobject__size__exprt.html",tooltip="Expression for finding the size (in bytes) of the object a pointer points to."];
  Node1 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="pointer_object_exprt",height=0.2,width=0.4,color="black",URL="$classpointer__object__exprt.html",tooltip="A numerical identifier for the object a pointer points to."];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="pointer_offset_exprt",height=0.2,width=0.4,color="black",URL="$classpointer__offset__exprt.html",tooltip="The offset (in bytes) of a pointer relative to the object."];
  Node1 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="popcount_exprt",height=0.2,width=0.4,color="black",URL="$classpopcount__exprt.html",tooltip="The popcount (counting the number of bits set to 1) expression."];
  Node1 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="typecast_exprt",height=0.2,width=0.4,color="black",URL="$classtypecast__exprt.html",tooltip="Semantic type conversion."];
  Node1 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="unary_minus_exprt",height=0.2,width=0.4,color="black",URL="$classunary__minus__exprt.html",tooltip="The unary minus expression."];
  Node1 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="unary_plus_exprt",height=0.2,width=0.4,color="black",URL="$classunary__plus__exprt.html",tooltip="The unary plus expression."];
  Node1 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="unary_predicate_exprt",height=0.2,width=0.4,color="black",URL="$classunary__predicate__exprt.html",tooltip="A base class for expressions that are predicates, i.e., Boolean-typed, and that take exactly one argu..."];
  Node30 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="is_dynamic_object_exprt",height=0.2,width=0.4,color="black",URL="$classis__dynamic__object__exprt.html",tooltip="Evaluates to true if the operand is a pointer to a dynamic object."];
  Node30 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="is_invalid_pointer\l_exprt",height=0.2,width=0.4,color="black",URL="$classis__invalid__pointer__exprt.html",tooltip=" "];
  Node30 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="isfinite_exprt",height=0.2,width=0.4,color="black",URL="$classisfinite__exprt.html",tooltip="Evaluates to true if the operand is finite."];
  Node30 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="isinf_exprt",height=0.2,width=0.4,color="black",URL="$classisinf__exprt.html",tooltip="Evaluates to true if the operand is infinite."];
  Node30 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="isnan_exprt",height=0.2,width=0.4,color="black",URL="$classisnan__exprt.html",tooltip="Evaluates to true if the operand is NaN."];
  Node30 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="isnormal_exprt",height=0.2,width=0.4,color="black",URL="$classisnormal__exprt.html",tooltip="Evaluates to true if the operand is a normal number."];
  Node30 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="sign_exprt",height=0.2,width=0.4,color="black",URL="$classsign__exprt.html",tooltip="Sign of an expression Predicate is true if _op is negative, false otherwise."];
  Node30 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="unary_overflow_exprt",height=0.2,width=0.4,color="black",URL="$classunary__overflow__exprt.html",tooltip="A Boolean expression returning true, iff operation kind would result in an overflow when applied to t..."];
  Node38 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="unary_minus_overflow\l_exprt",height=0.2,width=0.4,color="black",URL="$classunary__minus__overflow__exprt.html",tooltip="A Boolean expression returning true, iff negation would result in an overflow when applied to the (si..."];
  Node1 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="union_exprt",height=0.2,width=0.4,color="black",URL="$classunion__exprt.html",tooltip="Union constructor from single element."];
}
