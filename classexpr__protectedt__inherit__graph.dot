digraph "expr_protectedt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="expr_protectedt",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Base class for all expressions."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, forward_list\l_as_mapt\< irep_idt, irept \> \>" ,fontname="Helvetica"];
  Node5 [label="sharing_treet\< derivedt,\l named_subtreest \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip="Base class for tree-like data structures with sharing."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="already_typechecked\l_exprt",height=0.2,width=0.4,color="black",URL="$classalready__typechecked__exprt.html",tooltip=" "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="binary_exprt",height=0.2,width=0.4,color="black",URL="$classbinary__exprt.html",tooltip="A base class for binary expressions."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="binary_predicate_exprt",height=0.2,width=0.4,color="red",URL="$classbinary__predicate__exprt.html",tooltip="A base class for expressions that are predicates, i.e., Boolean-typed, and that take exactly two argu..."];
  Node7 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="binding_exprt",height=0.2,width=0.4,color="red",URL="$classbinding__exprt.html",tooltip="A base class for variable bindings (quantifiers, let, lambda)"];
  Node7 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="byte_extract_exprt",height=0.2,width=0.4,color="black",URL="$classbyte__extract__exprt.html",tooltip="Expression of type type extracted from some object op starting at position offset (given in number of..."];
  Node7 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="complex_exprt",height=0.2,width=0.4,color="black",URL="$classcomplex__exprt.html",tooltip="Complex constructor from a pair of numbers."];
  Node7 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="constant_interval_exprt",height=0.2,width=0.4,color="black",URL="$classconstant__interval__exprt.html",tooltip="Represents an interval of values."];
  Node7 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="cpp_static_assertt",height=0.2,width=0.4,color="black",URL="$classcpp__static__assertt.html",tooltip=" "];
  Node7 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="div_exprt",height=0.2,width=0.4,color="black",URL="$classdiv__exprt.html",tooltip="Division."];
  Node7 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="dynamic_object_exprt",height=0.2,width=0.4,color="black",URL="$classdynamic__object__exprt.html",tooltip="Representation of heap-allocated objects."];
  Node7 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="element_address_exprt",height=0.2,width=0.4,color="black",URL="$classelement__address__exprt.html",tooltip="Operator to return the address of an array element relative to a base address."];
  Node7 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="euclidean_mod_exprt",height=0.2,width=0.4,color="black",URL="$classeuclidean__mod__exprt.html",tooltip="Boute's Euclidean definition of Modulo â€“ to match SMT-LIB2."];
  Node7 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="evaluate_exprt",height=0.2,width=0.4,color="black",URL="$classevaluate__exprt.html",tooltip=" "];
  Node7 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node43 [label="factorial_power_exprt",height=0.2,width=0.4,color="black",URL="$classfactorial__power__exprt.html",tooltip="Falling factorial power."];
  Node7 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="floatbv_typecast_exprt",height=0.2,width=0.4,color="black",URL="$classfloatbv__typecast__exprt.html",tooltip="Semantic type conversion from/to floating-point formats."];
  Node7 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="function_application\l_exprt",height=0.2,width=0.4,color="black",URL="$classfunction__application__exprt.html",tooltip="Application of (mathematical) function."];
  Node7 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node46 [label="implies_exprt",height=0.2,width=0.4,color="black",URL="$classimplies__exprt.html",tooltip="Boolean implication."];
  Node7 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="index_exprt",height=0.2,width=0.4,color="black",URL="$classindex__exprt.html",tooltip="Array index operator."];
  Node7 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="let_exprt",height=0.2,width=0.4,color="black",URL="$classlet__exprt.html",tooltip="A let expression."];
  Node7 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="minus_exprt",height=0.2,width=0.4,color="black",URL="$classminus__exprt.html",tooltip="Binary minus."];
  Node7 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="mod_exprt",height=0.2,width=0.4,color="black",URL="$classmod__exprt.html",tooltip="Modulo defined as lhs-(rhs * truncate(lhs/rhs))."];
  Node7 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node51 [label="named_term_exprt",height=0.2,width=0.4,color="black",URL="$classnamed__term__exprt.html",tooltip="Expression that introduces a new symbol that is equal to the operand."];
  Node7 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node52 [label="object_descriptor_exprt",height=0.2,width=0.4,color="black",URL="$classobject__descriptor__exprt.html",tooltip="Split an expression into a base object and a (byte) offset."];
  Node7 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="power_exprt",height=0.2,width=0.4,color="black",URL="$classpower__exprt.html",tooltip="Exponentiation."];
  Node7 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node54 [label="replication_exprt",height=0.2,width=0.4,color="black",URL="$classreplication__exprt.html",tooltip="Bit-vector replication."];
  Node7 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="saturating_minus_exprt",height=0.2,width=0.4,color="black",URL="$classsaturating__minus__exprt.html",tooltip="Saturating subtraction expression."];
  Node7 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node56 [label="saturating_plus_exprt",height=0.2,width=0.4,color="black",URL="$classsaturating__plus__exprt.html",tooltip="The saturating plus expression."];
  Node7 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node57 [label="shift_exprt",height=0.2,width=0.4,color="red",URL="$classshift__exprt.html",tooltip="A base class for shift and rotate operators."];
  Node1 -> Node61 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node61 [label="extractbits_exprt",height=0.2,width=0.4,color="black",URL="$classextractbits__exprt.html",tooltip="Extracts a sub-range of a bit-vector operand."];
  Node1 -> Node62 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node62 [label="index_designatort",height=0.2,width=0.4,color="black",URL="$classindex__designatort.html",tooltip=" "];
  Node1 -> Node63 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node63 [label="member_designatort",height=0.2,width=0.4,color="black",URL="$classmember__designatort.html",tooltip=" "];
  Node1 -> Node64 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node64 [label="multi_ary_exprt",height=0.2,width=0.4,color="black",URL="$classmulti__ary__exprt.html",tooltip="A base class for multi-ary expressions Associativity is not specified."];
  Node64 -> Node65 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node65 [label="and_exprt",height=0.2,width=0.4,color="black",URL="$classand__exprt.html",tooltip="Boolean AND."];
  Node64 -> Node66 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node66 [label="array_exprt",height=0.2,width=0.4,color="black",URL="$classarray__exprt.html",tooltip="Array constructor from list of elements."];
  Node64 -> Node67 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node67 [label="array_list_exprt",height=0.2,width=0.4,color="black",URL="$classarray__list__exprt.html",tooltip="Array constructor from a list of index-element pairs Operands are index/value pairs,..."];
  Node64 -> Node68 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node68 [label="bitand_exprt",height=0.2,width=0.4,color="black",URL="$classbitand__exprt.html",tooltip="Bit-wise AND."];
  Node64 -> Node69 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node69 [label="bitor_exprt",height=0.2,width=0.4,color="black",URL="$classbitor__exprt.html",tooltip="Bit-wise OR."];
  Node64 -> Node70 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node70 [label="bitxor_exprt",height=0.2,width=0.4,color="black",URL="$classbitxor__exprt.html",tooltip="Bit-wise XOR."];
  Node64 -> Node71 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node71 [label="concatenation_exprt",height=0.2,width=0.4,color="black",URL="$classconcatenation__exprt.html",tooltip="Concatenation of bit-vector operands."];
  Node64 -> Node72 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node72 [label="cond_exprt",height=0.2,width=0.4,color="black",URL="$classcond__exprt.html",tooltip="this is a parametric version of an if-expression: it returns the value of the first case (using the o..."];
  Node64 -> Node73 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node73 [label="mult_exprt",height=0.2,width=0.4,color="black",URL="$classmult__exprt.html",tooltip="Binary multiplication Associativity is not specified."];
  Node64 -> Node74 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node74 [label="or_exprt",height=0.2,width=0.4,color="black",URL="$classor__exprt.html",tooltip="Boolean OR."];
  Node64 -> Node75 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node75 [label="plus_exprt",height=0.2,width=0.4,color="black",URL="$classplus__exprt.html",tooltip="The plus expression Associativity is not specified."];
  Node64 -> Node76 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node76 [label="shuffle_vector_exprt",height=0.2,width=0.4,color="black",URL="$classshuffle__vector__exprt.html",tooltip="Shuffle elements of one or two vectors, modelled after Clang's __builtin_shufflevector."];
  Node64 -> Node77 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node77 [label="struct_exprt",height=0.2,width=0.4,color="red",URL="$classstruct__exprt.html",tooltip="Struct constructor from list of elements."];
  Node64 -> Node79 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node79 [label="tuple_exprt",height=0.2,width=0.4,color="black",URL="$classtuple__exprt.html",tooltip=" "];
  Node64 -> Node80 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node80 [label="vector_exprt",height=0.2,width=0.4,color="black",URL="$classvector__exprt.html",tooltip="Vector constructor from list of elements."];
  Node64 -> Node81 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node81 [label="xor_exprt",height=0.2,width=0.4,color="black",URL="$classxor__exprt.html",tooltip="Boolean XOR."];
  Node1 -> Node82 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node82 [label="nullary_exprt",height=0.2,width=0.4,color="red",URL="$classnullary__exprt.html",tooltip="An expression without operands."];
  Node1 -> Node100 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node100 [label="overflow_result_exprt",height=0.2,width=0.4,color="black",URL="$classoverflow__result__exprt.html",tooltip="An expression returning both the result of the arithmetic operation under wrap-around semantics as we..."];
  Node1 -> Node101 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node101 [label="predicate_exprt",height=0.2,width=0.4,color="red",URL="$classpredicate__exprt.html",tooltip="A base class for expressions that are predicates, i.e., Boolean-typed."];
  Node1 -> Node103 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node103 [label="ternary_exprt",height=0.2,width=0.4,color="red",URL="$classternary__exprt.html",tooltip="An expression with three operands."];
  Node1 -> Node111 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node111 [label="unary_exprt",height=0.2,width=0.4,color="red",URL="$classunary__exprt.html",tooltip="Generic base class for unary expressions."];
  Node1 -> Node146 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node146 [label="with_exprt",height=0.2,width=0.4,color="black",URL="$classwith__exprt.html",tooltip="Operator to update elements in structs and arrays."];
}
