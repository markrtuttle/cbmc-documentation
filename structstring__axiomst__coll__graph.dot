digraph "string_axiomst"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="string_axiomst",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" not_contains" ,fontname="Helvetica"];
  Node2 [label="std::vector\< string\l_not_contains_constraintt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node3 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node3 [label="string_not_contains\l_constraintt",height=0.2,width=0.4,color="black",URL="$structstring__not__contains__constraintt.html",tooltip="Constraints to encode non containement of strings."];
  Node4 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" s0\ns1" ,fontname="Helvetica"];
  Node4 [label="array_string_exprt",height=0.2,width=0.4,color="black",URL="$classarray__string__exprt.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="red",URL="$classsharing__treet.html",tooltip=" "];
  Node5 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" univ_upper_bound\nuniv_lower_bound\nexists_upper_bound\nexists_lower_bound\npremise" ,fontname="Helvetica"];
  Node11 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< string_not_contains\l_constraintt \>" ,fontname="Helvetica"];
  Node11 [label="std::vector\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node15 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" universal" ,fontname="Helvetica"];
  Node15 [label="std::vector\< string\l_constraintt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node16 -> Node15 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node16 [label="string_constraintt",height=0.2,width=0.4,color="black",URL="$classstring__constraintt.html",tooltip=" "];
  Node5 -> Node16 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" body\nupper_bound\nlower_bound" ,fontname="Helvetica"];
  Node17 -> Node16 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" univ_var" ,fontname="Helvetica"];
  Node17 [label="symbol_exprt",height=0.2,width=0.4,color="black",URL="$classsymbol__exprt.html",tooltip="Expression to hold a symbol (variable)"];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="nullary_exprt",height=0.2,width=0.4,color="black",URL="$classnullary__exprt.html",tooltip="An expression without operands."];
  Node19 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="expr_protectedt",height=0.2,width=0.4,color="black",URL="$classexpr__protectedt.html",tooltip="Base class for all expressions."];
  Node5 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 -> Node15 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< string_constraintt \>" ,fontname="Helvetica"];
}
