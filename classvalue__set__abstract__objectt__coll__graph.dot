digraph "value_set_abstract_objectt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="value_set_abstract\l_objectt",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="abstract_value_objectt",height=0.2,width=0.4,color="black",URL="$classabstract__value__objectt.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="abstract_objectt",height=0.2,width=0.4,color="black",URL="$classabstract__objectt.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="std::enable_shared\l_from_this\< abstract\l_objectt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" t" ,fontname="Helvetica"];
  Node5 [label="typet",height=0.2,width=0.4,color="black",URL="$classtypet.html",tooltip="The type of an expression, extends irept."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip=" "];
  Node8 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" empty_d\ndata" ,fontname="Helvetica"];
  Node8 [label="tree_nodet\< treet,\l named_subtreest, sharing \>",height=0.2,width=0.4,color="red",URL="$classtree__nodet.html",tooltip="A node with data in a tree, it contains:"];
  Node14 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, forward_list\l_as_mapt\< irep_idt, irept \> \>" ,fontname="Helvetica"];
  Node14 [label="sharing_treet\< derivedt,\l named_subtreest \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip="Base class for tree-like data structures with sharing."];
  Node8 -> Node14 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" empty_d\ndata" ,fontname="Helvetica"];
  Node15 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="abstract_value_tag",height=0.2,width=0.4,color="black",URL="$classabstract__value__tag.html",tooltip=" "];
  Node16 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="value_set_tag",height=0.2,width=0.4,color="black",URL="$classvalue__set__tag.html",tooltip=" "];
  Node17 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" values" ,fontname="Helvetica"];
  Node17 [label="abstract_object_sett",height=0.2,width=0.4,color="black",URL="$classabstract__object__sett.html",tooltip=" "];
  Node18 -> Node17 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" values" ,fontname="Helvetica"];
  Node18 [label="std::unordered_set\l\< abstract_object_pointert,\l abstract_hashert, abstract\l_equalert \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node19 -> Node18 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node19 [label="std::shared_ptr\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node12 -> Node19 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node12 [label="T",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node20 -> Node18 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< abstract_object_pointert,\l abstract_hashert, abstract\l_equalert \>" ,fontname="Helvetica"];
  Node20 [label="std::unordered_set\< K \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node21 -> Node20 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node21 [label="K",height=0.2,width=0.4,color="grey75",tooltip=" "];
}
