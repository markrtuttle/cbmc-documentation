digraph "ternary_exprt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="ternary_exprt",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="An expression with three operands."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="expr_protectedt",height=0.2,width=0.4,color="black",URL="$classexpr__protectedt.html",tooltip="Base class for all expressions."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="exprt",height=0.2,width=0.4,color="black",URL="$classexprt.html",tooltip="Base class for all expressions."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="irept",height=0.2,width=0.4,color="black",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="sharing_treet\< irept,\l forward_list_as_mapt\l\< irep_idt, irept \> \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irept, forward_list\l_as_mapt\< irep_idt, irept \> \>" ,fontname="Helvetica"];
  Node6 [label="sharing_treet\< derivedt,\l named_subtreest \>",height=0.2,width=0.4,color="black",URL="$classsharing__treet.html",tooltip="Base class for tree-like data structures with sharing."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="allocate_exprt",height=0.2,width=0.4,color="black",URL="$classallocate__exprt.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="byte_update_exprt",height=0.2,width=0.4,color="black",URL="$classbyte__update__exprt.html",tooltip="Expression corresponding to op() where the bytes starting at position offset (given in number of byte..."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="ieee_float_op_exprt",height=0.2,width=0.4,color="black",URL="$classieee__float__op__exprt.html",tooltip="IEEE floating-point operations These have two data operands (op0 and op1) and one rounding mode (op2)..."];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="if_exprt",height=0.2,width=0.4,color="black",URL="$classif__exprt.html",tooltip="The trinary if-then-else operator."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="transt",height=0.2,width=0.4,color="black",URL="$classtranst.html",tooltip="Transition system, consisting of state invariant, initial state predicate, and transition predicate."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="update_exprt",height=0.2,width=0.4,color="black",URL="$classupdate__exprt.html",tooltip="Operator to update elements in structs and arrays."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="update_state_exprt",height=0.2,width=0.4,color="black",URL="$classupdate__state__exprt.html",tooltip=" "];
}
