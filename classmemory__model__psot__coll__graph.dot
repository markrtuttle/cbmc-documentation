digraph "memory_model_psot"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="memory_model_psot",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="memory_model_tsot",height=0.2,width=0.4,color="black",URL="$classmemory__model__tsot.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="memory_model_sct",height=0.2,width=0.4,color="black",URL="$classmemory__model__sct.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="memory_model_baset",height=0.2,width=0.4,color="black",URL="$classmemory__model__baset.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="partial_order_concurrencyt",height=0.2,width=0.4,color="black",URL="$classpartial__order__concurrencyt.html",tooltip="Base class for implementing memory models via additional constraints for SSA equations."];
  Node6 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" clock_type" ,fontname="Helvetica"];
  Node6 [label="typet",height=0.2,width=0.4,color="black",URL="$classtypet.html",tooltip="The type of an expression, extends irept."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="irept",height=0.2,width=0.4,color="red",URL="$classirept.html",tooltip="There are a large number of kinds of tree structured or tree-like data in CPROVER."];
  Node16 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" address_map" ,fontname="Helvetica"];
  Node16 [label="std::map\< irep_idt,\l a_rect \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node14 -> Node16 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node14 [label="dstringt",height=0.2,width=0.4,color="black",URL="$classdstringt.html",tooltip="dstringt has one field, an unsigned integer no which is an index into a static table of strings."];
  Node17 -> Node16 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node17 [label="partial_order_concurrencyt\l::a_rect",height=0.2,width=0.4,color="red",URL="$structpartial__order__concurrencyt_1_1a__rect.html",tooltip=" "];
  Node20 -> Node16 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< irep_idt, a_rect \>" ,fontname="Helvetica"];
  Node20 [label="std::map\< K, T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node22 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ns" ,fontname="Helvetica"];
  Node22 [label="namespacet",height=0.2,width=0.4,color="black",URL="$classnamespacet.html",tooltip="A namespacet is essentially one or two symbol tables bound together, to allow for symbol lookups in t..."];
  Node23 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="namespace_baset",height=0.2,width=0.4,color="black",URL="$classnamespace__baset.html",tooltip="Basic interface for a namespace."];
  Node24 -> Node22 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" symbol_table1\nsymbol_table2" ,fontname="Helvetica"];
  Node24 [label="symbol_table_baset",height=0.2,width=0.4,color="red",URL="$classsymbol__table__baset.html",tooltip="The symbol table base class interface."];
  Node27 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" numbering" ,fontname="Helvetica"];
  Node27 [label="std::map\< event_it,\l unsigned \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node19 -> Node27 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" keys" ,fontname="Helvetica"];
  Node19 [label="std::list\< T \>::const\l_iterator",height=0.2,width=0.4,color="grey75",tooltip="STL iterator class."];
  Node20 -> Node27 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< event_it, unsigned \>" ,fontname="Helvetica"];
  Node28 -> Node4 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" choice_symbols" ,fontname="Helvetica"];
  Node28 [label="std::map\< std::pair\l\< event_it, event_it\l \>, symbol_exprt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node29 -> Node28 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" elements" ,fontname="Helvetica"];
  Node29 [label="symbol_exprt",height=0.2,width=0.4,color="black",URL="$classsymbol__exprt.html",tooltip="Expression to hold a symbol (variable)"];
  Node30 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="nullary_exprt",height=0.2,width=0.4,color="red",URL="$classnullary__exprt.html",tooltip="An expression without operands."];
  Node20 -> Node28 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< std::pair\< event\l_it, event_it \>, symbol\l_exprt \>" ,fontname="Helvetica"];
}
