digraph "call_stack_historyt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="call_stack_historyt",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Records the call stack Care must be taken when using this on recursive code; it will need the domain ..."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="ai_history_baset",height=0.2,width=0.4,color="black",URL="$classai__history__baset.html",tooltip="A history object is an abstraction / representation of the control-flow part of a set of traces."];
  Node3 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" no_caller_history" ,fontname="Helvetica"];
  Node3 [label="std::shared_ptr\< T \>",height=0.2,width=0.4,color="grey75",tooltip="STL class."];
  Node4 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node4 [label="T",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" current_stack" ,fontname="Helvetica"];
  Node5 [label="std::shared_ptr\< const\l call_stack_entryt \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ptr" ,fontname="Helvetica"];
  Node6 [label="call_stack_historyt\l::call_stack_entryt",height=0.2,width=0.4,color="black",URL="$classcall__stack__historyt_1_1call__stack__entryt.html",tooltip=" "];
  Node5 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" caller" ,fontname="Helvetica"];
  Node3 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const call_stack\l_entryt \>" ,fontname="Helvetica"];
}
